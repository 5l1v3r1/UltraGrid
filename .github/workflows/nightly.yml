name: nightly

on:
  #schedule:
  #- cron:  '0 6 * * *' # Daily at 6:00 UTC
  push:
    branches:
      - ci-nightly
    paths:
      - '.github/scripts/**'
      - '.github/workflows/nightly.yml'
      - '**.c'
      - '**.cpp'
      - '**.cu'
      - '**.h'
      - '**.hpp'
      - '**.m'
      - '**.mm'
      - 'autogen.sh'
      - 'configure.ac'
      - 'data/scripts/**.sh'
      - 'Makefile.in'

jobs:
  retag-nightly:
    if: github.repository == 'CESNET/UltraGrid' || github.repository == 'MartinPulec/UltraGrid'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, we do not need to create own token.
    steps:
    - uses: actions/checkout@v2
      with:
        persist-credentials: true
    - name: Retag nightly
      run: |
        git tag -f nightly
        git push -f origin refs/tags/nightly:refs/tags/nightly
    - name: Update Release
      run: |
        sudo apt install jq
        URL=$(curl -H "Authorization: token $GITHUB_TOKEN" -X GET https://api.github.com/repos/$GITHUB_REPOSITORY/releases/tags/nightly | jq -r '.url')
        curl -H "Authorization: token $GITHUB_TOKEN" -X PATCH $URL -T - <<'EOF'
        {
          "tag_name": "nightly",
          "name": "nightly builds",
          "body": "Current builds from GIT master branch. Here are [archived builds](https://frakira.fi.muni.cz/~xpulec/ug-nightly-archive/).",
          "draft": false,
          "prerelease": true
        }
        EOF

  Ubuntu:
    needs: retag-nightly
    if: github.repository == 'CESNET/UltraGrid' || github.repository == 'MartinPulec/UltraGrid'
    name: run Ubuntu
    runs-on: ubuntu-latest
    env:
      sdk_pass: ${{ secrets.sdk_pass }}

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: bootstrap
      run: .github/scripts/Linux/prepare.sh
    - name: Cache static Qt
      id: cache-qt-linux
      uses: actions/cache@v1
      with:
        path: /usr/local/qt
        key: cache-qt-linux
    - name: Build static Qt
      if: steps.cache-qt-linux.outputs.cache-hit != 'true'
      run: .github/scripts/Linux/build-qt.sh
    - name: configure
      run: ./autogen.sh --enable-qt --enable-static-qt --with-cuda-host-compiler=gcc-6 --enable-plugins
    - name: make
      run: make
    - name: make check
      run: make check
    - name: make distcheck
      run: make distcheck
    - name: Create AppImage
      run: APPIMAGE=`data/scripts/Linux-AppImage/create-appimage.sh` && mv $APPIMAGE UltraGrid-x86_64.AppImage
    - name: Upload Release Asset
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        sudo apt install jq
        .github/scripts/delete-asset.sh nightly UltraGrid-x86_64.AppImage
        .github/scripts/upload-asset.sh nightly UltraGrid-x86_64.AppImage application/x-appimage Linux%20build

  macOS:
    needs: retag-nightly
    if: github.repository == 'CESNET/UltraGrid' || github.repository == 'MartinPulec/UltraGrid'
    name: run macOS
    runs-on: macos-latest
    env:
      sdk_pass: ${{ secrets.sdk_pass }}

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: bootstrap
      run: .github/scripts/macOS/prepare.sh
    - name: Cache static Qt
      id: cache-qt-mac
      uses: actions/cache@v1
      with:
        path: /usr/local/opt/qt
        key: cache-qt-mac
    - name: Build static Qt
      if: steps.cache-qt-mac.outputs.cache-hit != 'true'
      run: .github/scripts/macOS/build-qt.sh
    - name: configure
      run: ./autogen.sh --enable-qt --enable-static-qt
    - name: make
      run: make osx-gui-dmg
    - name: make check
      run: make check
    - name: make distcheck
      run: make distcheck
    - name: Upload Release Asset
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        brew install jq
        .github/scripts/delete-asset.sh nightly UltraGrid.dmg
        .github/scripts/upload-asset.sh nightly UltraGrid.dmg application/x-apple-diskimage macOS%20build

  Windows:
    needs: retag-nightly
    if: github.repository == 'CESNET/UltraGrid' || github.repository == 'MartinPulec/UltraGrid'
    name: run Windows
    runs-on: windows-latest
    env:
      sdk_pass: ${{ secrets.sdk_pass }}
    
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: Find MSVC
      run: .github/scripts/Windows/find_msvc.ps1
    - name: bootsrap
      run: .github/scripts/Windows/prepare.ps1
    - name: bootsrap MSYS2
      run: C:\msys64\usr\bin\bash -lc '$GITHUB_WORKSPACE/.github/scripts/Windows/prepare_msys.sh'
    - name: configure
      run: C:\msys64\usr\bin\bash -lc "./autogen.sh --enable-qt --disable-ndi"
    - name: make
      run: C:\msys64\usr\bin\bash -lc "make"
    - name: make check
      run: C:\msys64\usr\bin\bash -lc "make check"
    - name: make dist-check
      run: C:\msys64\usr\bin\bash -lc "make distcheck"
    - name: add DLL depends
      run: |
        C:\msys64\usr\bin\bash -lc 'cp gui/QT/release/uv-qt.exe bin'
        C:\msys64\usr\bin\bash -lc 'rm bin/run_tests.exe; IFS=\"|\"; for exe in bin/*exe; do for n in `data/scripts/get_dll_depends.sh \"$exe\" | tr \"\n\" \"|\"`; do cp \"$n\" bin; done; done'
        C:\msys64\usr\bin\bash -lc 'windeployqt bin/uv-qt.exe'
        C:\msys64\usr\bin\bash -lc 'mv bin UltraGrid-win64'
        C:\msys64\usr\bin\bash -lc 'zip -9 -r UltraGrid-win64.zip UltraGrid-win64'
    - name: Upload Release Asset
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        C:\msys64\usr\bin\bash -lc '$GITHUB_WORKSPACE/.github/scripts/delete-asset.sh nightly UltraGrid-win64.zip'
        C:\msys64\usr\bin\bash -lc '$GITHUB_WORKSPACE/.github/scripts/upload-asset.sh nightly UltraGrid-win64.zip application/zip Windows%20build'

# vi: set expandtab sw=2:
